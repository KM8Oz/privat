{"version":3,"sources":["/var/www/html/privat/src/pages/src/pages/Loader.vue","/var/www/html/privat/src/pages/mobile/src/pages/mobile/translation.vue","/var/www/html/privat/src/pages/desktop/src/pages/desktop/translation.vue","/var/www/html/privat/src/pages/chat.vue"],"names":[],"mappings":"AAWA,QACA,aAAA,CACA,yBAAA,CACA,6BAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,iCACA,CAEA,gBACA,GACA,sBACA,CACA,GACA,wBACA,CACA,CCo3BA,eACA,8BACA,CC5BA,OACA,UAAA,CACA,kBACA,CACA,oBACA,sBAAA,CACA,kCACA,CACA,MACA,aACA,CCp2BA,mBACE,aA3BF","file":"5.a9a1bacf.css","sourcesContent":["<template>\n  <section class=\"loader\"></section>\n</template>\n\n<script>\nexport default {\n  name: \"Loader\"\n};\n</script>\n\n<style>\n.loader {\n  margin: 0 auto;\n  border: 16px solid #34495e; /* Light grey */\n  border-top: 16px solid #41b883; /* Blue */\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n  animation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n","<template>\n  <q-page class=\"row bg-white fullpage\">\n    <div class=\"topvideostream\">   \n        <transition\n  appear\n  enter-active-class=\"animated bounceInDown\"\n  leave-active-class=\"animated bounceOutUp\"\n>\n       <q-chip class=\"q-ml-md q-mt-md\" >\n         <q-avatar >\n           {{viewers ? viewers.filter(e=>e.username != pcm.user.un).length : 0}}\n         </q-avatar>\n        {{username}}\n      </q-chip>\n           </transition>\n        <!-- <transition\n  appear\n  enter-active-class=\"animated bounceInDown\"\n  leave-active-class=\"animated bounceOutUp\"\n>\n      <q-btn class=\"q-mr-xs\" v-if=\"!opendialog\" size=\"20px\" @click=\"switchcamera\" round color=\"none\" icon=\"cameraswitch\" />\n        </transition> -->\n         <transition\n  appear\n  enter-active-class=\"animated bounceInDown\"\n  leave-active-class=\"animated bounceOutUp\"\n>\n      <q-btn class=\"q-mr-xs\" v-if=\"!opendialog\" size=\"20px\" @click=\"opendialog = !opendialog\" round color=\"none\" icon=\"speaker_notes\" />\n        </transition>\n      </div>\n      <div  v-touch:swipe.right=\"onright\" class=\"row col-12 fixed fit flex-center-div h-vh-100\">\n        <video\n          id=\"video\"\n          class=\"col-12 bg-black h-vh-100 video-fit\"\n          autoplay\n          playsinline\n          muted\n          poster=\"https://rec.camsguns.com/stream.png\"\n        ></video>\n        <q-btn\n          round\n          color=\"white\"\n          @click=\"streamControl()\"\n          style=\"margin-top: -30vw; height: 15vw; width: 15vw\"\n          v-if=\"!opendialog\"\n        >\n          <q-icon\n            class=\"text-pink-6 w-100 h-100\"\n            size=\"8vw\"\n             v-if=\"!streamStarted\"\n            name=\"play_arrow\"\n           \n          />\n           <q-icon\n            class=\"text-pink-6 w-100 h-100\"\n            size=\"8vw\"\n             v-else\n            name=\"stop\"\n           \n          />\n        </q-btn>\n      </div>\n    <q-dialog\n      v-model=\"opendialog\"\n      persistent\n      seamless\n      :position=\"'top'\"\n      transition-show=\"bounce-down\"\n      transition-hide=\"bounce-up\"\n      class=\"col-12 h-vh-49\"\n      content-class=\"\"\n    >\n      <q-card class=\"videodialog primary text-white\">\n        <q-bar class=\"bar-try\">\n          <q-space />\n\n          <q-btn class=\"q-mt-lg\" dense size=\"20px\"  flat icon=\"speaker_notes_off\" v-close-popup>\n            <q-tooltip content-class=\"primary text-primary\">Close</q-tooltip>\n          </q-btn>\n        </q-bar>\n\n        <!-- <q-card-section>\n             <div class=\"w-100 h-vh-6\">\n            <q-card class=\"text-black no-shadow h-i\">\n                <q-card-section class=\"q-ma-none q-pa-none\">\n            <div class=\"row justify-between mt-vh-1\">\n              <div class=\"row ml-vw-1\">\n                <q-avatar size=\"8vh\">\n                  <img class=\"bordavatar\" :src=\"useravatar\" />\n                </q-avatar>\n                <div class=\"row ml-vw-1\">\n                  <p class=\"text-black col-12 q-mb-none text-fxl mt-vh-05 text-nowrap\">\n                    {{myname}}\n                    <q-badge\n                      v-if=\"!isPrivate\"\n                      color=\"pink-6\"\n                      class=\"q-ml-sm text-black-50 q-mb-none\"\n                      align=\"middle\"\n                    >\n                      <span class=\"dot q-mr-xs bg-white\"></span> live\n                    </q-badge>\n                    <q-badge\n                      v-else\n                      color=\"pink-6\"\n                      class=\"q-ml-sm text-black-50 q-mb-none\"\n                      align=\"middle\"\n                    >\n                      <span class=\"dot q-mr-xs bg-white\"></span> private\n                    </q-badge>\n                  </p>\n                  <p\n                    class=\"text-grey-8 col-12 cuttext text-nowrap text-xl q-mb-none h-vh-3\"\n                  >@{{username}}</p>\n                </div>\n              </div>\n            </div>\n            <div class=\"row text-max2-xl ml-vw-1 q-ma-none\">\n              <p class=\"text-xl q-ma-none\">{{streamDesc}}</p>\n            </div>\n             {{tags(open_post_data.tags)}} \n            <p class=\"text-black cuttext text-xl mb-1 q-ma-none h-mc ml-vw-1\">{{tags}}</p>\n          </q-card-section>\n                <q-card class=\"tabschat\">\n                    <q-tabs v-model=\"tabpanel\" dense class=\"text-grey\" active-color=\"pink-6\" indicator-color=\"pink-6\" align=\"justify\" narrow-indicator>\n                        <q-tab name=\"chat\">\n                            <p class=\"q-ma-none text-mobilestreambar\">Чат</p>\n                        </q-tab>\n                         <q-tab name=\"persons\">\n                <p class=\"q-ma-none text-mobilestreambar\">Пользователи</p>\n              </q-tab> \n                       <q-tab name=\"donat\">\n                <p class=\"q-ma-none text-mobilestreambar\">Донат</p>\n              </q-tab> \n                        <q-tab name=\"settings\">\n                            <p class=\"q-ma-none text-mobilestreambar\">Настройки</p>\n                        </q-tab>\n                    </q-tabs>\n                </q-card>\n            </q-card>\n        </div>\n        </q-card-section> -->\n\n        <q-card-section class=\"q-pt-none\">\n          <q-tab-panels\n            v-model=\"tabpanel\"\n            animated\n              v-bind:style=\"{ height: height1+30  + 'px' }\"\n            class=\"videodialog\"\n            swipeable\n          >\n            <q-tab-panel\n              name=\"chat\"\n              class=\"q-pa-none q-mt-md\"\n                v-bind:style=\"{ height: height1  + 'px' }\"\n            >\n              <q-scroll-area\n                ref=\"chatscroll\"\n                class=\" ml-vw-1 q-pa-none\"\n                :thumb-style=\"{display:'none'}\"\n                :bar-style=\"{display:'none'}\"\n                :style=\"{ height: height1  + 'px' }\"\n                 :content-style=\"{display:'block'}\"\n              > \n                <!-- <div style=\"width:95%\" class=\"text-white\"\n                v-for=\"(v, i) in viewers\" :key=\"i\" v-show=\"v.username != pcm.user.un\">\n                  <div class=\"q-ma-none row flexchat\">\n                             <q-chip dense>\n        <q-avatar color=\"red\" text-color=\"white\">    <q-icon name=\"visibility\" /></q-avatar>\n        {{ v.username }}:\n      </q-chip>\n                    <p class=\"text-xl text-pink-6 q-ma-none q-ml-xs\">поздоровайся с {{v.username}}</p>\n                  </div>\n                </div> -->\n                <div\n                  style=\"width: 95%\"\n                  class=\"text-white\"\n                  v-for=\"item in datachat\"\n                  :key=\"item.date\"\n                >\n                  <div class=\"q-ma-none row flexchat\" v-if=\"item.ismodel\">\n                             <q-chip dense>\n        <q-avatar color=\"red\" text-color=\"white\">    <img :src=\"item.avatar\" /></q-avatar>\n        {{ item.name }}:\n      </q-chip>\n                    <p class=\"text-xl text-pink-6 q-ma-none q-ml-xs\">{{ item.text }}</p>\n                  </div>\n                  <div class=\"q-ma-none row flexchat\" v-else-if=\"!item.ismodel && item.avatar\">\n                    <q-chip dense>\n        <q-avatar color=\"red\" text-color=\"white\"><img :src=\"item.avatar\" /></q-avatar>\n        {{ item.name }}:\n      </q-chip>\n                    <p class=\"text-white text-xl q-ma-none q-ml-xs\">{{ item.text }}</p>\n                  </div>\n                  <div class=\"q-ma-none row flexchat\" v-else-if=\"!item.ismodel && !item.name\">\n                       <q-chip dense>\n        <q-avatar color=\"red\" text-color=\"white\">    <q-icon name=\"visibility\" /></q-avatar>\n        {{ item.username }}:\n      </q-chip>\n                    <p class=\"text-xl text-pink-6 q-ma-none q-ml-xs\">поздоровайся с {{item.username}}</p>\n                  </div>\n                   <div class=\"q-ma-none row flexchat\" v-else>\n                    <q-chip dense>\n        <q-avatar color=\"red\" text-color=\"white\"><img :src=\"item.avatar\" /></q-avatar>\n        {{ item.name }}:\n      </q-chip>\n                    <p class=\"text-white text-xl q-ma-none q-ml-xs\">{{ item.text }}</p>\n                  </div>\n                </div>\n              </q-scroll-area>\n     <transition\n  appear\n  enter-active-class=\"animated bounceInDown\"\n  leave-active-class=\"animated bounceOutUp\"\n>\n              <div class=\"row wi\">\n                <q-input\n                  v-on:keyup.enter=\"send_comment()\"\n                  v-model=\"chat_send\"\n                  placeholder=\"Ваше сообщение\"\n                  borderless\n                  input-class=\"text-body1 backy text-white q-pl-md\"\n                  class=\"sendfix  col-10 h-i q-ml-xs q-mt-xs\"\n                />\n\n                <q-btn\n                  color=\"green\"\n                  class=\"btnsend q-my-auto q-mx-auto text-center\"\n                  align=\"center\"\n                  icon=\"mdi-send\"\n                  outline\n                  round\n                  text-color=\"green\"\n                  @click=\"send_comment()\"\n                >\n                </q-btn>\n              </div>\n     </transition>\n            </q-tab-panel>\n            <q-tab-panel name=\"settings\" class=\"q-pa-none\">\n              <q-scroll-area\n                ref=\"commentsscroll\"\n                class=\"comdial  ml-vw-1 q-pa-none h-vh-100 mr-vw-1\"\n                :thumb-style=\"thumbStyle\"\n                :bar-style=\"barStyle\"\n              >\n                <q-card-section class=\"q-pb-none w-mxc q-pa-none row q-mx-auto\">\n                  <p\n                    class=\"col text-black text-weight-regular text-uppercase text-overline\"\n                  >\n                    Настройки доната\n                  </p>\n                </q-card-section>\n                <q-input\n                  class=\"text-xl b-border\"\n                  input-class=\"text-subtitle1 text-weight-regular q-px-xs\"\n                  autogrow\n                  maxlength=\"70\"\n                  color=\"black\"\n                  v-model=\"target\"\n                  placeholder=\"Цель сбора Токенов\"\n                  dense\n                />\n                <q-input\n                  class=\"q-mt-md text-xl b-border\"\n                  input-class=\"text-subtitle1 text-center text-weight-regular q-px-xs\"\n                  autogrow\n                  maxlength=\"60\"\n                  color=\"black\"\n                  v-model=\"sum\"\n                  placeholder=\"Сумма\"\n                  dense\n                />\n\n                <q-card-section class=\"q-pb-none w-mxc q-pa-none row q-mx-auto\">\n                  <p\n                    class=\"col text-black text-weight-regular text-uppercase text-overline\"\n                  >\n                    Настройки привата\n                  </p>\n                </q-card-section>\n                <q-input\n                  class=\"text-xl b-border\"\n                  input-class=\"text-subtitle1 text-center text-weight-regular q-px-xs\"\n                  v-model.number=\"sumPrivat\"\n                  color=\"black\"\n                  type=\"number\"\n                  placeholder=\"Стоимость минуты привата\"\n                  dense\n                />\n                <q-checkbox\n                  v-model=\"cMode\"\n                  color=\"black\"\n                  class=\"mt-vh-2 w-100 flex-center-div text-center\"\n                  dense\n                  size=\"4vh\"\n                >\n                  <p class=\"text-comment-18 gray-1337 q-ma-none\">\n                    Разрешить подглядывания\n                  </p>\n                </q-checkbox>\n\n                <q-card-section class=\"q-pb-none w-mxc q-pa-none q-mt-xs row q-mx-auto\">\n                  <p\n                    class=\"col text-black text-weight-regular text-uppercase text-overline\"\n                  >\n                    Настройки бота\n                  </p>\n                </q-card-section>\n                <q-input\n                  class=\"text-xl b-border\"\n                  input-class=\"text-subtitle1 text-weight-regular q-px-xs\"\n                  autogrow\n                  color=\"black\"\n                  v-model=\"botDesk\"\n                  placeholder=\"Текст сообщения бота\"\n                  dense\n                />\n                <q-input\n                  class=\"q-mt-md text-xl b-border\"\n                  input-class=\"text-center text-subtitle1 text-weight-regular q-px-xs\"\n                  v-model.number=\"botTime\"\n                  type=\"number\"\n                  placeholder=\"Таймаут\"\n                  color=\"black\"\n                  dense\n                />\n                <div class=\"flex-center-div\">\n                  <q-btn\n                    rounded\n                    outline\n                    class=\"q-mt-md q-mb-xs w-80 text-overline\"\n                    label=\"Сохранить\"\n                    color=\"black\"\n                    @click=\"cl_changestreaminfo()\"\n                  />\n                </div>\n              </q-scroll-area>\n            </q-tab-panel>\n            <q-tab-panel name=\"persons\" class=\"q-pa-none\"> </q-tab-panel>\n          </q-tab-panels>\n        </q-card-section>\n      </q-card>\n    </q-dialog>\n <q-dialog v-model=\"showprivate2\">\n        <q-card class=\"text-white fit flex flex-center\" style=\"background: rgba(254, 44, 85, 0.7)\">\n            <div class=\"justify-center row\">\n                <q-avatar class=\"col-12\" icon=\"videocam\"></q-avatar>\n                <p class=\"q-px-xl q-mt-md q-mx-lg text-center col-10\" style=\"font-size: 2vw\">\n                    {{ userprivate }} зовет вас в приват\n                </p>\n                <q-btn class=\"text-red bg-white text-weight-bold col-4 q-mr-sm q-mt-xs\" @click=\"SuccPrivate2()\" style=\"border-radius: 30px\">Согласна</q-btn>\n                <q-btn class=\"text-weight-bold bg-grey text-white col-4 q-ml-sm q-mt-xs\" style=\"border-radius: 30px\" @click=\"canselPrivate2()\">Нет</q-btn>\n            </div>\n        </q-card>\n    </q-dialog>\n    <q-dialog v-model=\"showprivate\">\n      <q-card\n        class=\"text-white fit flex flex-center\"\n        style=\"background: rgba(254, 44, 85, 0.7)\"\n      >\n        <div class=\"justify-center row\">\n          <q-avatar class=\"col-12\" icon=\"videocam\"></q-avatar>\n          <p class=\"q-px-xl q-mt-md q-mx-lg text-center col-10\" style=\"font-size: 2vw\">\n            {{ userprivate }} завет вас в приват\n          </p>\n          <q-btn\n            class=\"text-red bg-white text-weight-bold col-4 q-mr-sm q-mt-xs\"\n            @click=\"SuccPrivate()\"\n            style=\"border-radius: 30px\"\n            >Согласна</q-btn\n          >\n          <q-btn\n            class=\"text-weight-bold bg-grey text-white col-4 q-ml-sm q-mt-xs\"\n            style=\"border-radius: 30px\"\n            @click=\"canselPrivate()\"\n            >Нет</q-btn\n          >\n        </div>\n      </q-card>\n    </q-dialog>\n\n    <q-dialog v-model=\"closeprivate\">\n      <q-card\n        class=\"text-white fit flex flex-center\"\n        style=\"background: rgba(254, 44, 85, 0.7)\"\n      >\n        <div class=\"justify-center row\">\n          <q-avatar class=\"col-12\" icon=\"videocam\"></q-avatar>\n          <p class=\"q-px-xl q-mt-md q-mx-lg text-center col-10\" style=\"font-size: 2vw\">\n            У {{ userprivate }} закочились токены\n          </p>\n          <q-btn\n            class=\"text-red bg-white text-weight-bold col-4 q-mr-sm q-mt-xs\"\n            @click=\"closeprivate = false\"\n            style=\"border-radius: 30px\"\n            >ОК</q-btn\n          >\n        </div>\n      </q-card>\n    </q-dialog>\n  </q-page>\n</template>\n\n<script>\nimport Loader from \"../Loader.vue\";\nimport http from \"../../http-common\";\nimport { LocalStorage } from \"quasar\";\nimport * as getMedia from 'get-user-media-promise';\nimport { mapState } from 'vuex';\nexport default {\n  name: \"VideoCapture\",\n  data() {\n    return {\n      chat_send: null,\n      showprivate2:false,\n      datachat: [],\n      connection: null,\n      mediaRecorder: null,\n      streamStarted: false,\n      tabpanel: \"chat\",\n      peoplesIn:0,\n      sockestsIte:null,\n      facemode:true,\n      viewers:null,\n      thumbStyle: {\n        display: \"none\",\n      },\n      barStyle: {\n        display: \"none\",\n      },\n      username: LocalStorage.getItem(\"username\"),\n      myname: LocalStorage.getItem(\"name\"),\n      useravatar: null,\n      streamDesc: null,\n      tags: null,\n      oldViewers:[],\n      height1: null,\n      target: null,\n      sum: null,\n      sumPrivat: null,\n      cMode: false,\n      botDesk: null,\n      botTime: null,\n      userprivate: null,\n      showprivate: false,\n      userprivateid: null,\n      closeprivate: false,\n      private2:{\n        start_time:null\n        },\n      isPrivate: false,\n      alluser: null,\n      donat: null,\n      opendialog: false,\n    };\n  },\n  watch:{\n    viewers:function(val){\n      let vm = this\n      this.arr_diff(vm.oldViewers, val).then((res)=>{\n      // console.log(res);\n        if(res !== []){\n         res.map(e=>e ? vm.datachat.push(e): e)\n        }\n      })\n        //  this.datachat.push()\n        this.oldViewers = val;\n    }\n  },\n  computed:{\n    ...mapState(['pcm'])\n  },\n  beforeMount:function(){\n  this.username = this.pcm.user.un;\n  \n  },\n  beforeDestroy() {\n    this.stop();\n    clearInterval(this.sockestsIte)\n  },\n  sockets: {\n    cl_getalluser: function (response) {\n      this.alluser = response.alluser;\n    },\n    // cl_newdonat: function (response) {\n    //   this.donat = response.alluser\n    // },\n    cl_preopleinlive: function(res){\n     this.peoplesIn = res.number > 0  ? res.number - 1 : res.number\n    },\n     cl_control_streams: function(res){\n           // console.log(res);\n         if(res.status){\n             if(res.payload){\n         this.$q.notify({\n             type:\"positive\",\n             message:`приватный чат закрыт пользователем { всего: ${res.payload.total}}`\n         })\n             } else {\n      this.$q.notify({\n             type:\"positive\",\n             message:\"private stream started\"\n         })\n             }\n         this.private2.start_time = new Date();\n         } \n        },\n    cl_newMassage: function (response) {\n      let jsonobj = {\n        text: response.text,\n        date: response.date,\n        name: response.name,\n        models: response.models,\n        ismodel: response.ismodel,\n        avatar: response.avatar\n      };\n      //console.log(jsonobj)\n      this.datachat.push(jsonobj);\n      setTimeout(() => {\n        this.$refs.chatscroll?.setScrollPosition(this.$refs.chatscroll?.scrollSize);\n      }, 500);\n    },\n\n    cl_streamcloused: function (response) {\n      if ((response.reason = \"clien have no money\")) {\n        this.closeprivate = true;\n      }\n      this.stop();\n    },\n\n    cl_StartPrivate: function (response) {\n      this.userprivate = response.userprivate;\n      this.userprivateid = response.userprivateid;\n      this.showprivate = true;\n    },\n    cl_StartPrivate2: function (response) {\n      this.userprivate = response.userprivate;\n      this.userprivateid = response.userprivateid;\n      this.showprivate2 = true;\n    },\n    cl_broadcastNewInfo: function (response) {\n      this.target = response.target; // цель сбор средств\n      this.sum = response.sum; //сумма средств\n      this.sumPrivat = response.sumPrivat; // сумма привата\n      this.cMode = response.cMode == \"true\" ? true : false;\n      this.botDesk = response.botDesk; // описание бота\n      this.botTime = response.botTime; // тайминг бога\n    },\n    cl_changetstreaminfo: function (response) {\n      if (response == \"ready\") {\n        this.$q.notify({\n          color: \"pink-6\",\n          message: \"Настройки изменены\",\n        });\n      }\n    },\n    cl_changestreamdata: function (response) {\n      this.streamDesc = response.streamDesc; //описание стрима\n      this.tags = response.tags; // теги\n      this.target = response.target; // цель сбор средств\n      this.sum = response.sum; //сумма средств\n      this.sumPrivat = response.sumPrivat; // сумма привата\n      this.cMode = response.cMode == \"true\" ? true : false;\n      this.botDesk = response.botDesk; // описание бота\n      this.botTime = response.botTime; // тайминг бога\n    },\n    cl_getstreaminfo: function (response) {\n      this.streamDesc = response.streamDesc; //описание стрима\n      this.tags = response.tags; // теги\n      this.target = response.target; // цель сбор средств\n      this.sum = response.sum; //сумма средств\n      this.sumPrivat = response.sumPrivat; // сумма привата\n      this.cMode = response.cMode == \"true\" ? true : false;\n      this.botDesk = response.botDesk; // описание бота\n      this.botTime = response.botTime; // тайминг бога\n    },\n    cl_getmyavatar: function (response) {\n      this.useravatar =\n        response.avatar != null\n          ? response.avatar\n          : \"https://cdn.quasar.dev/img/boy-avatar.png\";\n    },\n    cl_streamClose: function (response) {\n      if ((response.reason = \"clien have no money\")) {\n        this.stop();\n        this.$q.notify({\n          color: \"pink-6\",\n          message: \"У пользователя недостаточно токенов\",\n        });\n      }\n    },\n  },\n  mounted() {\n    let vm = this;\n    this.height1 = window.innerHeight - 150;\n    window.addEventListener(\"resize\", () => {\n      // We execute the same script as before\n      this.height1 = window.innerHeight - 150;\n     // console.log(this.height1);\n    });\n      this.sockestsIte = setInterval(()=>{\n this.findAllSockets()\n    }, 2000)\n    // setInterval(()=>{\n    //   this.$socket.emit('getPeoplesInStream',{\n    //     id: LocalStorage.getItem('userid'),\n    //     token: LocalStorage.getItem('token')\n    //   })\n    // },5000)\n    this.$socket.emit(\"s_changePage\", {\n      page: \"stream\",\n      model: this.pcm.user.id,\n      userid: this.pcm.user.id,\n      token: this.pcm.user.tk,\n    });\n    this.$socket.emit(\"s_getstreaminfo\", {\n      token: this.pcm.user.tk,\n      modelid: this.pcm.user.id,\n    });\n    this.$socket.emit(\"s_ModelStream\", {\n      userid: this.pcm.user.id,\n    });\n    this.$socket.emit(\"s_getmyavatar\", {\n      userid: this.pcm.user.id,\n    });\n    // setInterval(\n    //   function () {\n    //     http({\n    //       method: \"get\",\n    //       url: \"/search_comments_model\",\n    //       headers: {\n    //         \"x-access-token\": this.pcm.user.tk,\n    //       },\n    //     }).then((response2) => {\n    //       this.datachat = null;\n    //       this.datachat = response2.data;\n    //     });\n    //   }.bind(this),\n    //   3000\n    // );\n    // http({\n    //   method: \"get\",\n    //   url: \"/search_comments_model\",\n    //   headers: {\n    //     \"x-access-token\": this.pcm.user.tk,\n    //   },\n    // }).then((response2) => {\n    //   this.datachat = null;\n    //   this.datachat = response2.data;\n    // });\n    //  console.log(navigator.mediaDevices.getSupportedConstraints()) \n  //   {audio:{  audio: {\n  //   channelCount: 2,\n  //   echoCancellation:false\n  // }},video:{\n  //     facingMode:{exact:  \"user\"},\n  //     frameRate: { max: 30 },\n  //   }}\n  (async()=>{\n  //let devices = (await navigator.mediaDevices.enumerateDevices()).filter(e=>e.kind === \"videoinput\").map(e=>e.deviceId)\n    getMedia({audio:true,video:true})\n      .then((stream) => {\n        var options = {\n          mimeType: \"video/webm\",\n        };\n        this.mediaRecorder = new MediaRecorder(stream, options);\n        this.mediaRecorder.start(2000);\n        var video = document.querySelector(\"video\");\n        video.srcObject = stream;\n          vm.$q.notify({\n            type:'positive',\n          message: 'media support:'+getMedia.isSupported,\n          multiLine:true\n        });\n      })\n      .catch((err) => {\n       // console.log(navigator.mediaDevices.getSupportedConstraints())\n        vm.$q.notify({\n          message: 'try an other browser',\n          color: \"red\",\n        });\n      });\n  })()\n  \n  },\n  methods: {\n        canselPrivate2() {\n            this.$socket.emit(\"s_cancelPrivate2\", {\n                token: this.pcm.user.tk,\n                modelid: this.pcm.user.id,\n                userid: this.userprivateid\n            });\n            this.showprivate = false;\n        },\n    SuccPrivate2() {\n            this.$socket.emit(\"control_streams\", {\n                token: this.pcm.user.tk,\n                payload:{\n                    type:\"update\",\n                 modelid:this.pcm.user.id,\n                 user_in_private: this.userprivateid,\n                 is_private: true\n                }\n            });\n            this.showprivate2 = false;\n            // this.startPrivate();\n            this.isPrivate = true;\n        },\n     arr_diff: async function (a2, a1) {\n     // a2 old \n     // a1 new\n    var a = [], diff = [];\n    if(a2.length === 0){\n     a1.map(e=> diff.push(e))\n    \n   } else {\n    for (var i = 0; i < a2.length; i++) {\n        a[a2[i].username] = true;\n    }\n      for (var i = 0; i < a1.length; i++) {\n        if (a[a1[i].username]) {\n            delete a[a1[i].username];\n        } else {\n            diff.push(a1[i]);\n        }\n    }\n   }\n\n\n\n   \n    // for (var k in a) {\n    //     diff.push(k);\n    // }\n\n    return diff;\n},\n       findAllSockets: function(){\n this.$socket.emit(\"findAllInRoom\", {room: \"chat\"+this.pcm.user.id, token: this.pcm.user.tk}, (res)=>{\n          this.viewers = res.sockests\n         // console.log(res);\n        })\n        },\n    canselPrivate() {\n      this.$socket.emit(\"s_cancelPrivate\", {\n        token: this.pcm.user.tk,\n        modelid: this.pcm.user.id,\n        userid: this.userprivateid,\n      });\n      this.showprivate = false;\n    },\n    SuccPrivate() {\n      this.$socket.emit(\"s_StartPrivateModel\", {\n        token: this.pcm.user.tk,\n        modelid: this.pcm.user.id,\n        userid: this.userprivateid,\n      });\n      this.showprivate = false;\n      this.stop();\n      this.startPrivate();\n      this.isPrivate = true;\n    },\n    cl_changestreaminfo() {\n      if (\n        this.target != null &&\n        this.sum != null &&\n        this.sumPrivat != null &&\n        this.sumPrivat != 0 &&\n        this.botDesk != null &&\n        this.botTime != null\n      ) {\n        this.$socket.emit(\"changestreamdata\", {\n          token: this.pcm.user.tk,\n          target: this.target,\n          sum: this.sum,\n          sumPrivat: this.sumPrivat,\n          cMode: this.cMode,\n          botDesk: this.botDesk,\n          botTime: this.botTime,\n        });\n      } else {\n        this.$q.notify({\n          color: \"pink-6\",\n          message: \"Ошибка изменения поля пустые или неверны\",\n        });\n      }\n    },\n    send_comment() {\n      if (\n        this.chat_send == null ||\n        this.chat_send == \"\" ||\n        this.chat_send == \" \" ||\n        !this.chat_send.trim().length > 0\n      ) {\n        this.$q.notify({\n          // ограничение на 3 или 2 буквы тут будут бесполезны из за особенности русского языка\n          color: \"pink-6\",\n          message: \"Сообщение пустое\",\n        });\n        return;\n      }\n      this.$socket.emit(\"s_streamchatsend\", {\n        username: this.pcm.user.un,\n        modelid: this.pcm.user.id,\n        avatar:this.useravatar,\n        textmess: this.chat_send,\n      });\n      this.chat_send = null;\n    },\n    streamControl() {\n      if (this.streamStarted) {\n        this.isPrivate = false;\n        this.stop();\n      } else {\n        this.start(this);\n      }\n    },\n    onright:function(){\n     this.$root.$emit('changepage', 1)\n    },\n    //  start(){\n    //    this.connection = new WebSocket(\"wss://record.camsguns.com/streams?token=\" + this.pcm.user.tk +\"\");\n    //    this.mediaRecorder.addEventListener('dataavailable',videoDataHandler)\n    //    this.streamStarted = true;\n    //  },\n    //  stop() {\n    //    this.connection.close();\n    //    this.mediaRecorder.removeEventListener('dataavailable',videoDataHandler);\n    //    this.streamStarted = false;\n    //  },\n    switchcamera:async ()=>{\n     // console.log();\n     this.facemode = ! this.facemode;\n     this.stop();\n     this.start(this);\n    },\n    start:async function(vm){\n          // let devices = (await navigator.mediaDevices.enumerateDevices()).filter(e=>e.kind === \"videoinput\").map(e=>e.deviceId)\n      const websocketEndpoint =\n        \"wss://record.camsguns.com/streams?token=\" + this.pcm.user.tk + \"&type=mobile\";\n      this.connection = new WebSocket(websocketEndpoint);\n      \n     getMedia({\n          audio: true,\n            video:true,\n        })\n        .then((stream) => {\n          var options = {\n            mimeType: \"video/webm\",\n          };\n\n          vm.mediaRecorder = new MediaRecorder(stream, options);\n          vm.mediaRecorder.start(1500);\n          vm.mediaRecorder.ondataavailable = this.videoDataHandler;\n          var video = document.querySelector(\"video\");\n          video.srcObject = stream;\n          vm.streamStarted = true;\n        });\n    },\n    startPrivate() {\n      const websocketEndpoint =\n        \"wss://record.camsguns.com/private?token=\" +\n        this.pcm.user.tk +\n        \"&modelid=\" +\n        this.pcm.user.id +\n        \"&userid=\" +\n        this.userprivateid +\n       \"&type=mobile\";\n      this.connection = new WebSocket(websocketEndpoint);\n      getMedia({\n          audio: true,\n            video: { width: window.innerWidth, height: window.innerHeight},\n        })\n        .then((stream) => {\n          var options = {\n            mimeType: \"video/webm\",\n          };\n          this.mediaRecorder = new MediaRecorder(stream, options);\n          this.mediaRecorder.start(1000);\n          this.mediaRecorder.ondataavailable = this.videoDataHandler;\n          var video = document.querySelector(\"video\");\n          video.srcObject = stream;\n          this.streamStarted = true;\n        });\n    },\n    stop() {\n      this.mediaRecorder?.stop();\n      this.connection?.close();\n      this.streamStarted = false;\n    },\n    videoDataHandler(event) {\n      //this.isUploading = true;\n      let reader = new FileReader();\n      reader.readAsArrayBuffer(event.data);\n      reader.onloadend = () => {\n        this.connection.send(reader.result);\n      };\n    },\n  },\n};\n</script>\n\n<style>\n.mbb50 {\n  width: 100%;\n  margin-bottom: 10vh;\n}\n\n.purp {\n  color: #fe2c55;\n}\n\n.h-vh-resize49 {\n  height: calc(var(--vh, 1vh) * 49);\n}\n</style>\n","<template>\n    <q-page class=\"row bg-white\">\n        <div class=\"col-8 fullpage\" v-if=\"!$route.query.box\">\n            <div class=\"row col-12 flex-center-div\">\n                <video id=\"video\" class=\"col-12 bg-black fullpage\" autoplay muted></video>\n                <q-btn round class=\"fixed\" color=\"white\" @click=\"streamControl()\" style=\" margin-top:85vh; height:3vw; width:3vw;\">\n                    <q-icon class=\"text-black\" name=\"play_arrow\" v-if=\"!streamStarted\" />\n                    <q-icon class=\"text-black\" name=\"stop\" v-else />\n                </q-btn>\n            </div>\n        </div>\n        <div :class=\"pcm.controls.dark ? !$route.query.box ? 'col-4 bg-dark' : 'col-12 bg-dark':!$route.query.box ? 'col-4' : 'col-12'\">\n            <div class=\"w-100 h-vh-30\">\n                <q-card class=\"fit\">\n                    <q-card-section class=\"row video_traslation_header\">\n                        <div class=\"col justify-center items-center \">\n                            <div class=\"row fit\">\n                                <q-avatar>\n                                    <img  :src=\"modeldata ? modeldata.avatar : null\" />\n                                     \n                                </q-avatar>\n                                <div class=\"col model_username\" v-if=\"modeldata\">\n                                    <!-- <p class=\"col-12 q-mb-none text-subtitle1 mt-vh-05 text-nowrap\">\n                                        {{ modeldata.name }}\n                                    </p> -->\n                                    <p class=\"col-12 cuttext text-nowrap text-comment-14 q-mb-none h-vh-3 q-pl-xs\">\n                                        @{{ modeldata.username }}\n                                    </p>\n                                </div>\n                                <q-icon size=\"30px\" v-if=\"vibroenable === 'enabled'\">\n                                    <q-img src=\"../../assets/vibro2000.svg\"></q-img>\n                                </q-icon>\n                            </div>\n                        </div>\n                        <div class=\"col stream_animated\">\n                            <p class=\"text-body1 q-my-none text-weight-light\">{{ streamDesc }} : #{{ tags }}</p>\n                        </div>\n                        <q-btn label=\"закрыть приват\" v-if=\"closePrivate2show\" glossy color=\"red\" @click=\"closePrivate2\" class=\"close_private_stream\"/>\n                         <q-tabs :class=\"pcm.controls.dark ? 'tabschat bg-dark text-white' : 'tabschat' \" v-model=\"tabpanel\" dense  active-color=\"pink-6\" indicator-color=\"pink-6\" align=\"justify\" narrow-indicator>\n                            <q-tab name=\"chat\">\n                                <p class=\"q-ma-none text-comment-18\">Чат</p>\n                            </q-tab>\n                            <q-tab name=\"persons\">\n                                <p class=\"q-ma-none text-comment-18\">Пользователи</p>\n                            </q-tab>\n                            <!-- <q-tab name=\"donat\">\n                    <p class=\"q-ma-none text-comment-18\">Донат</p>\n                  </q-tab> -->\n                            <q-tab name=\"settings\">\n                                <p class=\"q-ma-none text-comment-18\">Настройки</p>\n                            </q-tab>\n                        </q-tabs>\n                    </q-card-section>\n                </q-card>\n            </div>           \n            \n             <q-tab-panels v-model=\"tabpanel\" animated>\n                                <q-tab-panel name=\"persons\" :class=\"pcm.controls.dark ?'q-pa-none q-pt-md h-vh-75 bg-dark':'q-pa-none q-pt-md h-vh-75 '\">\n                                    <q-scroll-area  class=\"row q-px-xs vh-55\" :thumb-style=\"thumbStyle\" :bar-style=\"barStyle\">\n                                       <q-list bordered separator>\n      <q-item clickable v-ripple v-for=\"(viewer,index) in viewers\"  :key=\"index\" v-show=\"viewer.username != pcm.user.un\">\n        <q-item-section :class=\"pcm.controls.dark ? 'text-white viewers_username oswald-semibold':'text-black viewers_username oswald-semibold'\">\n            {{viewer.username}}\n        </q-item-section>\n        <template side>\n            <q-icon size=\"20px\" :name=\"viewer.connected? 'check_circle':'unpublished'\" :color=\"viewer.connected? 'green': 'orange'\"/>\n        </template>\n      </q-item>\n    </q-list>\n                                    </q-scroll-area>\n                                </q-tab-panel>\n                <q-tab-panel name=\"chat\" :class=\"pcm.controls.dark ?'q-pa-none h-vh-75 bg-dark':'q-pa-none h-vh-75 '\">\n                    <q-scroll-area ref=\"chatscroll\" v-if=\"datachat.length > 0\" class=\"row q-px-md q-pt-md vh-55\" :thumb-style=\"thumbStyle\" :bar-style=\"barStyle\">\n                        <!-- <div style=\"width: 95%;\" class=\"text-white\" v-for=\"(item, index) in datachat\" :key=\"index\">\n                        <div class=\"q-ma-none row flexchat\" v-if=\"item.ismodel == true\">\n                            <b class=\"text-pink-6 text-comment-18\">{{ item.name }}:</b>\n                            <p class=\"text-comment-14 text-pink-6 q-ma-none\">\n                                {{ item.text }}\n                            </p>\n                        </div>\n                        <div class=\"q-ma-none row flexchat\" v-else>\n                            <b class=\"text-grey text-comment-18\">{{ item.name }}:</b>\n                            <p class=\"text-black text-comment-14 q-ma-none\">\n                                {{ item.text }}\n                            </p>\n                        </div>\n                    </div> -->\n                        <q-chat-message :class=\"`row  ${item.id !== pcm.user.id ? 'justify-start':''}`\" :sent=\"item.id !== pcm.user.id\" :label-sanitize=\"true\" v-for=\"(item, index) in datachat\" :key=\"index\" :bg-color=\"item.ismodel ? 'pink-6' : 'amber-7'\" :name=\"item.name\" :avatar=\"item.avatar\" :text=\"[item.text]\" :stamp=\"\n                  getdatediff(item.date).month !== 0\n                    ? `${getdatediff(item.date).month} months ago`\n                    : getdatediff(item.date).day !== 0\n                    ? `${getdatediff(item.date).day} days ago`\n                    : getdatediff(item.date).hr !== 0\n                    ? `${getdatediff(item.date).hr} hrs ago`\n                    : `${getdatediff(item.date).min} min ago`\n                \" />\n                    </q-scroll-area>\n                    <!-- <div class=\"vw-25 h-100\">\n                    <q-input v-on:keyup.enter=\"send_comment()\" v-model=\"chat_send\" placeholder=\"Ваше сообщение\" class=\"sendfix text-white h-v bg-white col-10\" />\n                    <q-btn class=\"col-2\" flat @click=\"send_comment()\">\n                        <q-icon color=\"grey\" name=\"mdi-send\" class=\"mb0\" />\n                    </q-btn>\n                </div> -->\n                    <div :class=\"!$route.query.box ? 'row fixed-bottom-right  w-vw-chat2': 'row fixed-bottom-right  w-vw-chat3' \">\n                        <q-input v-on:keyup.enter=\"send_comment()\" v-model=\"chat_send\" placeholder=\"Ваше сообщение\" borderless :color=\"pcm.controls.dark ? 'dark' : 'white'\" :input-class=\"`text-body1 backy-cmt ${\n                  pcm.controls.dark ? 'text-white' : 'text-dark'\n                }  q-my-md q-pl-md q-ml-none`\" class=\"col-10 backy-cmt2 q-my-xs q-ml-xs\">\n                            <!-- <template v-slot:prepend>\n                  <q-fab\n                    v-model=\"fabLeft\"\n                    vertical-actions-align=\"left\"\n                    :class=\"`${\n                      pcm.controls.dark ? 'text-white' : 'text-dark'\n                    } q-my-auto text-center q-pa-none`\"\n                    icon=\"keyboard_arrow_up\"\n                    direction=\"up\"\n                  >\n                    <q-fab-action\n                      label-position=\"right\"\n                      color=\"pink-6\"\n                      icon=\"vpn_lock\"\n                      label=\"Приват\"\n                    />\n                    <q-fab-action\n                      label-position=\"right\"\n                      color=\"pink-3\"\n                      icon=\"redeem\"\n                      label=\"Подарить токены\"\n                    />\n                  </q-fab>\n</template>-->\n          </q-input>\n\n          <q-btn\n            color=\"green\"\n            class=\"btnsend q-my-auto q-mx-auto text-center\"\n            align=\"center\"\n            icon=\"mdi-send\"\n            outline\n            round\n            text-color=\"green\"\n            @click=\"send_comment()\"\n          >\n          </q-btn>\n        </div>\n            </q-tab-panel>\n            <q-tab-panel name=\"settings\" :class=\"pcm.controls.dark ?'q-pa-none settings_scroller text-white bg-dark':'q-pa-none settings_scroller text-dark'\">\n                <q-scroll-area ref=\"commentsscroll\" class=\"comdial ml-vw-1 q-pa-none settings_scroller mr-vw-1 flex\" :thumb-style=\"thumbStyle\" :bar-style=\"barStyle\">\n                    <q-card-section class=\"q-mt-md w-mxc q-pa-none row\">\n                        <p class=\"col text-fxl font-weight-bolder line-height-1\">\n                            Настройки доната\n                        </p>\n                    </q-card-section>\n                    <q-input autogrow maxlength=\"70\" \n                     rounded outlined v-model=\"target\" bg-color=\"white\"  input-class=\"text-body1 q-mx-md q-mb-xs\" \n                     placeholder=\"Цель сбора Токенов\" dense />\n                    <q-input class=\"mt-vh-1 w-50\" bg-color=\"white\" type=\"number\"  input-class=\"text-body1 q-mx-md q-mb-xs text-weight-bold text-center\" rounded outlined v-model.number=\"sum\" placeholder=\"Сумма\" dense />\n\n                    <q-card-section class=\"mt-vh-2 q-pb-none w-mxc q-pa-none row\">\n                        <p class=\"col text-fxl  font-weight-bolder line-height-1\">\n                            Настройки привата\n                        </p>\n                    </q-card-section>\n                    <q-input bg-color=\"white\" class=\"w-50\"  input-class=\"text-body1 q-mx-md q-mb-xs text-weight-bold text-center\" rounded v-model.number=\"sumPrivat\" type=\"number\"  placeholder=\"Стоимость минуты привата\" outlined dense />\n                    <q-checkbox v-model=\"cMode\" color=\"pink\" class=\"mt-vh-2 text-overline flex-center\" dark dense size=\"40px\">\n                        <p class=\" q-ma-none\">\n                            Разрешить подглядывания\n                        </p>\n                    </q-checkbox>\n\n                    <q-card-section class=\"mt-vh-2 q-pb-none w-mxc q-pa-none row\">\n                        <p class=\"col text-fxl  font-weight-bolder line-height-1\">\n                            Настройки бота\n                        </p>\n                    </q-card-section>\n                    <q-input class=\"mt-vh-1\" bg-color=\"white\"  input-class=\"text-body1 q-mx-md q-mb-xs\" rounded  autogrow outlined v-model=\"botDesk\" placeholder=\"Текст сообщения бота\" dense />\n                    <q-input class=\"mt-vh-1  w-50\" bg-color=\"white\"  input-class=\"text-body1 text-weight-bold text-center q-mx-md q-mb-xs\" rounded  v-model.number=\"botTime\" type=\"number\" placeholder=\"Таймаут\" outlined dense />\n\n                    <q-card-section class=\"mt-vh-2 q-pb-none w-mxc q-pa-none row\">\n                        <p class=\"col text-fxl  font-weight-bolder line-height-1\">\n                            Настройки Лаша\n                        </p>\n                    </q-card-section>\n                    <q-input class=\"mt-vh-1  w-50\" bg-color=\"white\"  input-class=\"text-body1 text-center text-weight-bold q-mx-md q-mb-xs\" rounded  v-model.number=\"priceSecond\" type=\"number\" placeholder=\"Стоимость секунды\" outlined dense />\n             \n               <div class=\"w-100 flex flex-center\">\n                            <q-btn\n              dense\n              rounded\n              no-caps\n              class=\" h-15 text-subtitle1 mb-vh-4 mt-vh-2 q-px-xl  b-border\"\n              color=\"pink-6\"\n              @click=\"cl_changestreaminfo()\"\n              label=\"Сохранить\"\n            />\n               </div>\n                </q-scroll-area>\n            </q-tab-panel>\n        </q-tab-panels>\n    </div>\n\n    <q-dialog v-model=\"showprivate\">\n        <q-card class=\"text-white fit flex flex-center\" style=\"background: rgba(254, 64, 95, 0.7)\">\n            <div class=\"justify-center row\">\n                <q-avatar class=\"col-12\" icon=\"videocam\"></q-avatar>\n                <p class=\"q-px-xl q-mt-md q-mx-lg text-center col-10\" style=\"font-size: 2vw\">\n                    {{ userprivate }} зовет вас в видеозвонок\n                </p>\n                <q-btn class=\"text-red bg-white text-weight-bold col-4 q-mr-sm q-mt-xs\" @click=\"SuccPrivate()\" style=\"border-radius: 30px\">Согласна</q-btn>\n                <q-btn class=\"text-weight-bold bg-grey text-white col-4 q-ml-sm q-mt-xs\" style=\"border-radius: 30px\" @click=\"canselPrivate()\">Нет</q-btn>\n            </div>\n        </q-card>\n    </q-dialog>\n       <q-dialog v-model=\"showprivate2\">\n        <q-card class=\"text-white fit flex flex-center\" style=\"background: rgba(254, 44, 85, 0.7)\">\n            <div class=\"justify-center row\">\n                <q-avatar class=\"col-12\" icon=\"videocam\"></q-avatar>\n                <p class=\"q-px-xl q-mt-md q-mx-lg text-center col-10\" style=\"font-size: 2vw\">\n                    {{ userprivate }} зовет вас в приват\n                </p>\n                <q-btn class=\"text-red bg-white text-weight-bold col-4 q-mr-sm q-mt-xs\" @click=\"SuccPrivate2()\" style=\"border-radius: 30px\">Согласна</q-btn>\n                <q-btn class=\"text-weight-bold bg-grey text-white col-4 q-ml-sm q-mt-xs\" style=\"border-radius: 30px\" @click=\"canselPrivate2()\">Нет</q-btn>\n            </div>\n        </q-card>\n    </q-dialog>\n        <q-dialog v-model=\"LogInSessionst\" @hide=\"clearAll()\" content-style=\"dialog\" content-class=\"card-bg \">\n            <q-card flat class=\"mw-i w-reg rounded-14\">\n                <div>\n                 <div >\n                            <p class=\"q-mt-none mb-vh-2 mt-vh-2 text-fxl text-center\">Вход</p>\n                            <q-separator class=\"bg-grey-4\" />\n                            <q-form>\n                                <q-input input-class=\"q-ml-md q-mr-md text-subtitle2 text-weight-light\" class=\"mt-vh-5 text-comment-14 mx-vw-1 h-vh-5 q-pa-none\" v-model=\"username\" label=\"Ваш логин\" outlined lazy-rules rounded type=\"email\" :rules=\"[(val) => val && val.length > 0]\">\n                                </q-input>\n                                <q-input input-class=\"q-ml-md q-mr-md text-subtitle2 q-pt-none text-weight-light\" class=\"mt-vh-2 q-mb-md text-comment-14 mx-vw-1 h-vh-5 q-pa-none\" v-model=\"password\" label=\"Пароль\" outlined rounded lazy-rules type=\"password\" :rules=\"[(val) => val && val.length > 0]\">\n                                </q-input>\n                                <q-separator class=\"bg-grey-4\" />\n                                <q-card-actions class=\"d-flex q-pa-none flex-nowrap\" align=\"around\">\n                                    <!-- <q-btn label=\"Зарегистрироваться\" @click=\"qController('register')\" text-color=\"black\" flat class=\"w-50 text-comment-14 h-vh-1080-50px\" /> -->\n                                    <!-- :disable =\"func\" == quasar error  -->\n                                    <q-btn label=\"Войти\" @click=\"authUser()\" text-color=\"black\" flat class=\"w-50 text-comment-14 h-vh-1080-50px\" />\n                                </q-card-actions>\n                            </q-form>\n                    </div>\n                </div>\n            </q-card>\n        </q-dialog>\n    <q-dialog v-model=\"closeprivate\">\n        <q-card class=\"text-white fit flex flex-center\" style=\"background: rgba(254, 44, 85, 0.7)\">\n            <div class=\"justify-center row\">\n                <q-avatar class=\"col-12\" icon=\"videocam\"></q-avatar>\n                <p class=\"q-px-xl q-mt-md q-mx-lg text-center col-10\" style=\"font-size: 2vw\">\n                    У {{ userprivate }} закочились токены\n                </p>\n                \n                <q-btn class=\"text-red bg-white text-weight-bold col-4 q-mr-sm q-mt-xs\" @click=\"closeprivate = false\" style=\"border-radius: 30px\">ОК</q-btn>\n            </div>\n        </q-card>\n    </q-dialog>\n</q-page>\n</template>\n\n<script>\nimport Loader from \"../Loader.vue\";\nimport http from \"../../http-common\";\nimport {\n    LocalStorage,\n    date\n} from \"quasar\";\nimport { mapState } from 'vuex';\nimport { initializerFirebase, askForPermissioToReceiveNotifications } from \"../../firebase\";\nexport default {\n    name: \"VideoCapture\",\n    data() {\n        return {\n            priceSecond: 1000,\n            chat_send: null,\n            fabLeft: null,\n            private2:{\n                start_time:null\n            },\n            vibroenable: false,\n            datachat: [],\n            closePrivate2show:false,\n            connection: null,\n            viewers:null,\n            sockestsIte:null,\n            mediaRecorder: null,\n            streamStarted: false,\n            LogInSessionst:false,\n            tabpanel: \"chat\",\n            thumbStyle: {\n                display: \"none\"\n            },\n            barStyle: {\n                display: \"none\"\n            },\n            username: null,\n            myname: LocalStorage.getItem(\"name\"),\n            useravatar: null,\n            streamDesc: null,\n            datamodel: null,\n            modeldata: null,\n            showprivate2:false,\n            tags: null,\n            target: null,\n            sum: null,\n            sumPrivat: null,\n            cMode: false,\n            botDesk: null,\n            botTime: null,\n            password:null,\n            userprivate: null,\n            showprivate: false,\n            userprivateid: null,\n            closeprivate: false,\n            isPrivate: false,\n            alluser: null,\n            donat: null,\n            mediaStream: null,\n            video: null\n        };\n    },\n    computed: {\n        ...mapState(['pcm'])\n    },\n    created() {\n        //console.log(this.pcm.auth);\n        if (!this.pcm.auth) {\n            if (!this.$route.query.box) {\n                this.$router.push('/')\n            } else {\n                this.LogInSessionst = true\n            }\n        } else {\n            this.username = this.pcm.user.un;\n            this.auth = this.pcm.auth;\n            this.ismodel = this.pcm.user.rol\n        }\n    },\n    beforeDestroy() {\n        clearInterval(this.sockestsIte)\n        this.stop();\n        if (\n            this.mediaStream &&\n            this.mediaStream.stream &&\n            this.mediaStream.stream.getTracks()[0]\n        ) {\n            this.mediaStream.stream.getTracks().forEach(track => track.stop());\n            delete this.mediaStream;\n        }\n        if (\n            this.mediaRecorder &&\n            this.mediaRecorder.stream &&\n            this.mediaRecorder.stream.getTracks()[0]\n        ) {\n            this.mediaRecorder.stream.getTracks().forEach(track => track.stop());\n            this.mediaRecorder.stop();\n            delete this.mediaRecorder;\n        }\n    },\n    sockets: {\n        cl_privateRoute(response) {\n            //   console.log(\"response from private stream:\",response);\n            if (response.status == \"ready\") {\n                this.$router.push({\n                    path: `/private/${response.payload.chatkey}/${response.payload.modelid}/${response.payload.userid}/caller/`,\n                });\n                setTimeout(() => {\n                    location.reload()\n                }, 500)\n            } else {\n                // this.$q.notify({\n                //   color: \"pink-6\",\n                //   message: \"Модель отказала вам в привате\",\n                // });\n            }\n        },\n        applicationstatus: function(response) {\n            this.vibroenable = response.status\n        },\n        cl_getalluser: function(response) {\n            console.log(responce)\n            this.alluser = response.alluser;\n        },\n        Vibration(response) {\n            console.log(response)\n        },\n        // cl_newdonat: function (response) {\n        //   this.donat = response.alluser\n        // },\n        cl_newMassage: function(response) {\n            let jsonobj = {\n                text: response.text,\n                date: response.date,\n                name: response.name,\n                models: response.models,\n                ismodel: response.ismodel,\n                avatar: response.avatar,\n                id: response.id,\n            };\n            this.datachat.push(jsonobj);\n            setTimeout(() => {\n                this.$refs.chatscroll.setScrollPosition(this.$refs.chatscroll.scrollSize);\n            }, 500);\n        },\n\n        cl_streamcloused: function(response) {\n            if ((response.reason = \"clien have no money\")) {\n                this.closeprivate = true;\n            }\n            this.stop();\n        },\n\n        cl_StartPrivate: function(response) {\n            this.userprivate = response.userprivate;\n            this.userprivateid = response.userprivateid;\n            this.showprivate = true;\n        },\n        cl_StartPrivate2: function(response) {\n            this.userprivate = response.userprivate;\n            this.userprivateid = response.userprivateid;\n            this.showprivate2 = true;\n        },\n        cl_broadcastNewInfo: function(response) {\n            this.target = response.target; // цель сбор средств\n            this.sum = response.sum; //сумма средств\n            this.sumPrivat = response.sumPrivat; // сумма привата\n            this.cMode = response.cMode;\n            this.botDesk = response.botDesk; // описание бота\n            this.botTime = response.botTime; // тайминг бога\n        },\n        cl_changetstreaminfo: function(response) {\n            if (response == \"ready\") {\n                this.$q.notify({\n                    color: \"pink-6\",\n                    message: \"Настройки изменены\"\n                });\n            }\n        },\n        cl_control_streams: function(res){\n            console.log(res);\n         if(res.status){\n             if(res.payload){\n         this.$q.notify({\n             type:\"positive\",\n             message:`приватный чат закрыт пользователем { всего: ${res.payload.total}}`\n         })\n             } else {\n      this.$q.notify({\n             type:\"positive\",\n             message:\"private stream started\"\n         })\n         this.closePrivate2show =true\n             }\n         this.private2.start_time = new Date();\n         } \n        },\n        cl_changestreamdata: function(response) {\n            // console.log(responce);\n            this.streamDesc = response.streamDesc; //описание стрима\n            this.tags = response.tags; // теги\n            this.target = response.target; // цель сбор средств\n            this.sum = response.sum; //сумма средств\n            this.sumPrivat = response.sumPrivat; // сумма привата\n            this.cMode = response.cMode;\n            this.botDesk = response.botDesk; // описание бота\n            this.botTime = response.botTime; // тайминг бога\n            this.priceSecond = response.priceSecond // Стоимость секунды Lush\n        },\n        cl_getstreaminfo: function(response) {\n            // console.log('streamInfos:',response)\n            //this.modelavatar = response.avatar\n            this.modeldata = response.model\n            this.streamDesc = response.streamDesc; //описание стрима\n            this.tags = response.tags; // теги\n            this.target = response.target; // цель сбор средств\n            this.sum = response.sum; //сумма средств\n            this.sumPrivat = response.sumPrivat; // сумма привата\n            this.cMode = response.cMode;\n            this.botDesk = response.botDesk; // описание бота\n            this.botTime = response.botTime; // тайминг бога\n        },\n        cl_getmyavatar: function(response) {\n            this.useravatar =\n                response.avatar != null ?\n                response.avatar :\n                \"https://cdn.quasar.dev/img/boy-avatar.png\";\n        },\n        cl_streamClose: function(response) {\n            if ((response.reason = \"clien have no money\")) {\n                this.stop();\n                this.$q.notify({\n                    color: \"pink-6\",\n                    message: \"У пользователя недостаточно токенов\"\n                });\n            }\n        },\n        applicationstatus: function(data) {\n            // console.log(data);\n        }\n    },\n    mounted() {\n        // console.log(this.$route.query.box)\n    this.sockestsIte = setInterval(()=>{\n this.findAllSockets()\n    }, 2000)\n      \n    },\n    beforeMount() {\n        this.$socket.emit(\"s_changePage\", {\n            page: \"stream\",\n            model: this.pcm.user.id,\n            userid: this.pcm.user.id,\n            token: this.pcm.user.tk\n        });\n        this.$socket.emit(\"s_getstreaminfo\", {\n            token: this.pcm.user.tk,\n            modelid: this.pcm.user.id\n        });\n        this.$socket.emit(\"s_ModelStream\", {\n            userid: this.pcm.user.id\n        });\n        this.$socket.emit(\"s_getmyavatar\", {\n            userid: this.pcm.user.id\n        });\n        http({\n            method: \"post\",\n            url: \"/models_one\",\n            data: {\n                modelid: this.$route.params.modelid\n            }\n        }).then(response3 => {\n            this.datamodel = response3.data;\n        });\n        // setInterval(\n        //   function () {\n        //     http({\n        //       method: \"get\",\n        //       url: \"/search_comments_model\",\n        //       headers: {\n        //         \"x-access-token\": this.pcm.user.tk,\n        //       },\n        //     }).then((response2) => {\n        //       this.datachat = null;\n        //       this.datachat = response2.data;\n        //     });\n        //   }.bind(this),\n        //   3000\n        // );\n        // http({\n        //   method: \"get\",\n        //   url: \"/search_comments_model\",\n        //   headers: {\n        //     \"x-access-token\": this.pcm.user.tk,\n        //   },\n        // }).then((response2) => {\n        //   this.datachat = null;\n        //   this.datachat = response2.data;\n        // });\n        var vm = this;\n        if (!this.$route.query.box) {\n            navigator.mediaDevices\n                .getUserMedia({\n                    video: true,\n                    audio: true\n                })\n                .then(function(stream) {\n                    var options = {\n                        mimeType: \"video/webm\"\n                    };\n                    vm.mediaStream = {\n                        stream\n                    };\n                    let video = document.querySelector(\"video\");\n                    video.srcObject = stream;\n                    video.onloadedmetadata = function(e) {\n                        let video = document.querySelector(\"video\");\n                        video.play();\n                    };\n                });\n        }\n\n    },\n    methods: {\n          closePrivate2(){\n     if(this.pcm.auth){\n      //  this.$socket.unsubscribe(\"cl_newMassage_private\");\n      //  this.$socket.subscribe(\"cl_newMassage\")\n      this.$socket.emit(\"control_streams\", {\n        token: this.pcm.user.tk,\n        payload:{\n            type: \"close\",\n          modelid:this.pcm.user.id,\n          user_in_private: this.userprivateid\n        }\n      })\n      this.closePrivate2show = false\n    //   this.is_private_chat = false\n     }\n    },\n        findAllSockets: function(){\n this.$socket.emit(\"findAllInRoom\", {room: \"chat\"+this.pcm.user.id, token: this.pcm.user.tk}, (res)=>{\n          this.viewers = res.sockests\n         // console.log(res);\n        })\n        },\n        clearAll() {\n            this.username = new String(\"\");\n            this.password = new String(\"\");\n        },\n        LogInSession() {\n            if (this.auth) {\n                this.$socket.emit(\"s_authcontroll\", {\n                    massage: \"auth\",\n                });\n                this.$socket.emit(\"s_getmyavatar\", {\n                    userid: this.pcm.user.id,\n                });\n                this.$nextTick(() => {\n                    location.reload()\n                })\n            }\n        },\n        authUser() {\n            var data = {\n                username: this.username,\n                password: this.password,\n            };\n            http.post(\"/signin\", data).then((response) => {\n                if (response.data.stat == \"ok\") {\n                    const token = response.data.reason;\n                    const userid = response.data.userId;\n                    const username = response.data.username;\n                    const name = response.data.name;\n                    this.$q.cookies.set('sspcm', { sstk: token, ssur: name, ssuid: userid, ssun: username, ssrol: response.data.model }, {\n                        expires: '1d'\n                    })\n                    this.auth = true;\n                    let vm = this\n                    this.LogInSessionst = false;\n                    delete this.password;\n                    delete this.passAgain;\n                    this.LogInSession();\n                    initializerFirebase().then(() =>\n                        askForPermissioToReceiveNotifications(\n                            response.data.userId,\n                            vm.$q.platform.is\n                        ).then(() => console.log(\"permession requested\"))\n                    );\n                } else {\n                    this.$q.notify({\n                        color: \"negative\",\n                        message: \"Неверный логин или пароль\",\n                    });\n                }\n            }).catch((err)=>{\n           console.log(\"sign err:\", err);\n            });\n        },\n        getdatediff(dte) {\n            let date2 = new Date(dte);\n            let date1 = new Date();\n            let diff = (unit) => date.getDateDiff(date1, date2, unit);\n            return {\n                month: diff(\"months\"),\n                day: diff(\"days\"),\n                hr: diff(\"hours\"),\n                min: diff(\"minutes\"),\n            };\n        },\n        canselPrivate() {\n            this.$socket.emit(\"s_cancelPrivate\", {\n                token: this.pcm.user.tk,\n                modelid: this.pcm.user.id,\n                userid: this.userprivateid\n            });\n            this.showprivate = false;\n        },\n        canselPrivate2() {\n            this.$socket.emit(\"s_cancelPrivate2\", {\n                token: this.pcm.user.tk,\n                modelid: this.pcm.user.id,\n                userid: this.userprivateid\n            });\n            this.showprivate = false;\n        },\n        // checked(e){\n        // console.log('checked  ',e)\n        // },\n        SuccPrivate() {\n            this.$socket.emit(\"s_StartPrivateModel\", {\n                token: this.pcm.user.tk,\n                modelid: this.pcm.user.id,\n                userid: this.userprivateid,\n                payload: {\n                    userid: this.userprivateid,\n                    modelid: this.pcm.user.id,\n                    price: this.sumPrivat\n                }\n            });\n            this.showprivate = false;\n            this.stop();\n            // this.startPrivate();\n            this.isPrivate = true;\n        },\n        SuccPrivate2() {\n            this.$socket.emit(\"control_streams\", {\n                token: this.pcm.user.tk,\n                payload:{\n                    type:\"update\",\n                 modelid:this.pcm.user.id,\n                 user_in_private: this.userprivateid,\n                 is_private: true\n                }\n            });\n            this.showprivate2 = false;\n            // this.startPrivate();\n            this.isPrivate = true;\n        },\n        cl_changestreaminfo() {\n            if (\n                this.target != null &&\n                this.sum != null &&\n                this.sumPrivat != null &&\n                this.sumPrivat != 0 &&\n                this.botDesk != null &&\n                this.botTime != null\n            ) {\n                this.$socket.emit(\"changestreamdata\", {\n                    token: this.pcm.user.tk,\n                    target: this.target,\n                    sum: this.sum,\n                    sumPrivat: this.sumPrivat,\n                    cMode: this.cMode,\n                    botDesk: this.botDesk,\n                    botTime: this.botTime,\n                    priceSecond: this.priceSecond // Стоимость секунды Lush\n                });\n            } else {\n                this.$q.notify({\n                    color: \"pink-6\",\n                    message: \"Ошибка изменения поля пустые или неверны\"\n                });\n            }\n        },\n        send_comment() {\n            if (\n                this.chat_send == null ||\n                this.chat_send == \"\" ||\n                this.chat_send == \" \" ||\n                !this.chat_send.trim()\n            ) {\n                this.$q.notify({\n                    // ограничение на 3 или 2 буквы тут будут бесполезны из за особенности русского языка\n                    color: \"pink-6\",\n                    message: \"Сообщение пустое\",\n                });\n                return;\n            }\n            this.$socket.emit(\n                \"s_streamchatsend\", {\n                    username: this.pcm.user.un,\n                    modelid: this.pcm.user.id,\n                    textmess: this.chat_send,\n                    avatar: this.modeldata.avatar,\n                    id: this.pcm.user.id,\n                },\n                (err) => console.log(\"message sended:\", err)\n            );\n            this.chat_send = null;\n            // var data = {\n            //   username: this.pcm.user.un,\n            //   modelid: this.$route.params.modelid,\n            //   textmess: this.chat_send\n            // };\n            // http({\n            //   method: \"post\",\n            //   url: \"/create_comments_on\",\n            //   headers: {\n            //     \"x-access-token\": this.pcm.user.tk\n            //   },\n            //   data: data\n            // }).then(response => {\n            //   this.chat_send = \"отправка сообщения\";\n            //   //////////////////////////\n            //   if (response.data.result == \"created\") {\n            //     http({\n            //       method: \"get\",\n            //       url: \"/search_comments\",\n            //       headers: {\n            //         modelid: this.$route.params.modelid\n            //       }\n            //     }).then(response2 => {\n            //       this.chat_send = null;\n            //       this.datachat = response2.data.data;\n            //     });\n            //   }\n            //   ///////////////////////////\n            // });\n        },\n        streamControl() {\n            if (this.streamStarted) {\n                this.isPrivate = false;\n                this.stop();\n            } else {\n                this.start();\n            }\n        },\n        //  start(){\n        //    this.connection = new WebSocket(\"wss://record.camsguns.com/streams?token=\" + this.pcm.user.tk +\"\");\n        //    this.mediaRecorder.addEventListener('dataavailable',videoDataHandler)\n        //    this.streamStarted = true;\n        //  },\n        //  stop() {\n        //    this.connection.close();\n        //    this.mediaRecorder.removeEventListener('dataavailable',videoDataHandler);\n        //    this.streamStarted = false;\n        //  },\n        start() {\n            var websocketEndpoint =\n                this._G.wsRecordURL + \"/streams?token=\" + this.pcm.user.tk;\n            this.connection = new WebSocket(websocketEndpoint);\n            let vm = this\n            this.connection.onopen = function() {\n                vm.mediarecordGrub(vm.mediaStream.stream);\n                console.log('socket channel opened');\n            }\n\n\n        },\n        mediarecordGrub(stream) {\n            this.mediaRecorder = new MediaRecorder(stream, {\n                mimeType: \"video/webm\",\n                videoBitsPerSecond: 1000000,\n                audioBitsPerSecond: 92000,\n                audioBitrateMode: \"variable\"\n            });\n            this.mediaRecorder.start(2000);\n            var video = document.querySelector(\"video\");\n            this.mediaRecorder.ondataavailable = this.videoDataHandler;\n            this.streamStarted = true;\n            this.$socket.emit('saveid', { status: true, modelid: this.pcm.user.id })\n        },\n        startPrivate() {\n            var websocketEndpoint =\n                this._G.wsRecordURL + \"/private?token=\" +\n                this.pcm.user.tk +\n                \"&modelid=\" +\n                this.pcm.user.id +\n                \"&userid=\" +\n                this.userprivateid +\n                \"\";\n            this.connection = new WebSocket(websocketEndpoint);\n            this.mediarecordGrub(this.mediaStream.stream);\n            this.streamStarted = true;\n        },\n        stop() {\n            if (\n                this.mediaRecorder &&\n                this.mediaRecorder.stream &&\n                this.mediaRecorder.stream.getTracks()[0]\n            ) {\n                this.mediaRecorder.stop();\n            }\n            if (this.connection) {\n                this.connection.close();\n            }\n            this.streamStarted = false;\n        },\n        videoDataHandler(event) {\n            //this.isUploading = true;\n            //  console.log(\"blobs:\",event);\n            let reader = new FileReader();\n            reader.readAsArrayBuffer(event.data);\n            if (this.connection) {\n                reader.onloadend = () => {\n                    this.connection.send(reader.result);\n                };\n            }\n        }\n    }\n};\n</script>\n\n<style>\n.mbb50 {\n    width: 100%;\n    margin-bottom: 10vh;\n}\n.q-message-received {\n    display: flex !important;\n    justify-content: flex-end !important;\n}\n.purp {\n    color: #fe2c55;\n}\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\na {\r\n  color: #049161;\r\n}\r\n"]}