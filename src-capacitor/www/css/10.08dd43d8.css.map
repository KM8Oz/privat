{"version":3,"sources":["/var/www/html/privat/src/pages/desktop/src/pages/desktop/privatechat.vue","/var/www/html/privat/src/pages/mobile/src/pages/mobile/privatechat.vue"],"names":[],"mappings":"AAyaA,yBACA,UAAA,CACA,WAAA,CAKA,kBAEA,CACA,uDAPA,YAAA,CACA,kBAAA,CACA,cAAA,CACA,4BAAA,CAEA,qBAYA,CAVA,8BACA,OAAA,CACA,QAAA,CACA,iBAAA,CAKA,mBAEA,CACA,yBACA,UAAA,CACA,WAAA,CACA,eACA,CACA,yBACA,iBAAA,CACA,MAAA,CACA,WAAA,CACA,kBAAA,CACA,WAAA,CACA,UACA,CACA,qBAAA,wBAAA,CACA,mBAAA,CACA,oBAAA,CACA,qBAAA,CACA,sBAAA,CACA,uBAAA,CACA,sBACA,CACA,2BACA,UAAA,CACA,cACA,CACA,wBACA,UAAA,CACA,cACA,CACA,6BACA,WAAA,CAEA,eAAA,CACA,eAAA,CAEA,SAAA,CACA,iBAGA,CACA,oDATA,UAAA,CAGA,+BAAA,CAGA,YAAA,CACA,sBAeA,CAbA,uBAEA,eAAA,CACA,iBAAA,CACA,gBAAA,CACA,cAAA,CACA,uBAAA,CACA,wBAAA,CACA,kDAAA,CAEA,gBAGA,CACA,0BACA,YAAA,CACA,gBACA,CACA,mCACA,iBAAA,CACA,MAAA,CACA,QAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,YAAA,CACA,YAAA,CACA,sBAAA,CACA,kBACA,CAEA,oCACA,iCACA,yBAEA,CAEA,CACA,oCAEA,2DAEA,0BAAA,CACA,4BACA,CACA,mCACA,cACA,CACA,4BACA,eACA,CAEA,yBACA,iBAAA,CACA,MAAA,CACA,QAAA,CACA,kBAAA,CACA,WAAA,CACA,UACA,CACA,CACA,2DAEA,WACA,CACA,4BACA,UAAA,CACA,SAAA,CACA,eAAA,CACA,eAAA,CACA,kBAAA,CACA,YAAA,CACA,iBAAA,CACA,QACA,CACA,gCACA,4BAAA,CAAA,iBAAA,CACA,4CAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CACA,kBAAA,CACA,+BAAA,CACA,4BAAA,CACA,0BAAA,CACA,wBAAA,CAIA,gBAAA,CACA,oBACA,CACA,sCACA,4CACA,CACA,2CAAA,sBAAA,CACA,2BACA,iBAAA,CACA,QAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,6CAAA,CAEA,kBAAA,CACA,YAAA,CACA,4BAAA,CACA,qBAAA,CACA,wBAAA,CACA,UAAA,CACA,eAAA,CACA,eACA,CC1TA,yBACA,UAAA,CACA,WAAA,CAKA,kBAEA,CACA,uDAPA,YAAA,CACA,kBAAA,CACA,cAAA,CACA,4BAAA,CAEA,qBAYA,CAVA,8BACA,OAAA,CACA,QAAA,CACA,iBAAA,CAKA,mBAEA,CACA,yBACA,UAAA,CACA,WAAA,CACA,eACA,CACA,yBACA,iBAAA,CACA,MAAA,CACA,WAAA,CACA,kBAAA,CACA,WAAA,CACA,UACA,CACA,qBAAA,wBAAA,CACA,mBAAA,CACA,oBAAA,CACA,qBAAA,CACA,sBAAA,CACA,uBAAA,CACA,sBACA,CACA,2BACA,UAAA,CACA,cACA,CACA,wBACA,UAAA,CACA,cACA,CACA,6BACA,WAAA,CACA,UAAA,CACA,eAAA,CACA,eAAA,CACA,+BAAA,CACA,SAAA,CACA,iBACA,CACA,uBACA,UAAA,CACA,eAAA,CACA,iBAAA,CACA,gBAAA,CACA,cAAA,CACA,uBAAA,CACA,wBAAA,CACA,kDAAA,CACA,+BAAA,CACA,gBAAA,CACA,YAAA,CACA,sBACA,CACA,0BACA,YAAA,CACA,gBACA,CACA,mCACA,iBAAA,CACA,MAAA,CACA,QAAA,CACA,kBAAA,CACA,WAAA,CACA,UAAA,CACA,YAAA,CACA,YAAA,CACA,sBAAA,CACA,kBACA,CAEA,oCACA,iCACA,yBAEA,CAEA,CACA,oCAEA,2DAEA,0BAAA,CACA,4BACA,CACA,mCACA,cACA,CACA,4BACA,eACA,CAEA,yBACA,iBAAA,CACA,MAAA,CACA,QAAA,CACA,kBAAA,CACA,WAAA,CACA,UACA,CACA,CACA,2DAEA,WACA,CACA,4BACA,UAAA,CACA,SAAA,CACA,eAAA,CACA,eAAA,CACA,kBAAA,CACA,YAAA,CACA,iBAAA,CACA,QACA","file":"10.08dd43d8.css","sourcesContent":["<template>\n  <div class=\"grid-1\">\n    <video\n      class=\"caller\"\n      src=\"\"\n      autoplay\n      poster=\"https://thelinuxuser.com/wp-content/uploads/2020/01/1-2.jpg\"\n      :controls=\"false\"\n    ></video>\n    <video\n      class=\"called\"\n      poster=\"https://thumbs.dreamstime.com/b/offline-sign-round-ribbon-sticker-tag-171014661.jpg\"\n      :controls=\"false\"\n    ></video>\n    <av-media\n      type=\"circle\"\n      line-color=\"#fff\"\n      class=\"wallframe-called\"\n      :media=\"calledMedia\"\n      :canv-height=\"250\"\n    ></av-media>\n    <div  class=\"pricetag\">\n      <span class=\"price oswald-semibold\">цена/минута:{{streamControl.price}}</span>\n    <span class=\"accountOne oswald-semibold\">ваш счет:{{streamControl.accountOne}}</span>\n    <span class=\"total oswald-semibold\">сомма: {{streamControl.transfered}}</span>\n    </div>\n    <!-- <div class=\"grid-videos\">\n      <div class=\"panel\">\n        <div\n          class=\"paneltools\"\n          @click=\"animated = animated === 'slidein' ? 'slideout' : 'slidein'\"\n        >\n        <span class=\"text-black q-ma-xs \">\n          {{countingdown  !== 0 ? countingdown : \"\"}}\n        </span>\n        </div>\n        <div :class=\"`chat ${animated}`\">\n          <button class=\"startCall\" @click=\"makeCall\">start</button>\n        </div> \n      </div>\n    </div> -->\n    <beautiful-chat\n      :agentProfile=\"agentProfile\"\n      :onMessageWasSent=\"onMessageWasSent\"\n      :messageList=\"messageList\"\n      :newMessagesCount=\"newMessagesCount\"\n      :isOpen=\"isChatOpen\"\n      :close=\"closeChat\"\n      :open=\"openChat\"\n      :colors=\"colors\"\n      :showEmoji=\"true\"\n      :showFile=\"true\"\n      :participants=\"participants\"\n    />\n     <q-dialog v-model=\"request_call\" >\n        <q-card>\n        <q-card-section>\n          <div class=\"text-h6\">Terms of Agreement</div>\n        </q-card-section>\n\n        <q-separator />\n\n        <q-card-section style=\"max-height: 50vh\" class=\"scroll\">\n          <p v-for=\"n in 15\" :key=\"n\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Rerum repellendus sit voluptate voluptas eveniet porro. Rerum blanditiis perferendis totam, ea at omnis vel numquam exercitationem aut, natus minima, porro labore.</p>\n        </q-card-section>\n\n        <q-separator />\n        <q-card-actions align=\"right\">\n          <q-btn flat label=\"Aннуляция\"  color=\"red\" v-close-popup />\n          <q-btn flat label=\"Звонить\" @click=\"acceptCall\" color=\"green\" v-close-popup />\n        </q-card-actions>\n      </q-card>\n     </q-dialog>\n    \n  </div>\n</template>\n<script>\n// import { peer  } from \"../utils/serverConnect\"\n// import { leaps } from \"leaps\";\nimport Urlp from \"url-parse\";\nimport { mapState } from 'vuex';\nexport default {\n  name: \"HelloWorld\",\n  // component:{\n  //   leaps\n  // },\n  data() {\n    return {\n      msg: \"Welcome to Your Vue.js App\",\n      id: \"idtest\",\n      animated: \"\",\n      request_call:false, \n      calledMedia: null,\n      called: null,\n      countingdown:null,\n      modelid:null,\n      userid:null,\n      streamControl:{\n       price:0,\n       accountOne:0,\n       accountedTwo:0,\n       transfered:0,\n      },\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      }, // specifies th\n      caller: null,\n      participants:[],\n      agentProfile: {\n        teamName: \"Vue Beautiful Chat\",\n        imageUrl: \"https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\",\n      },\n      messageList: [],\n      newMessagesCount: 0,\n      isChatOpen: false,\n      connection:null\n    };\n  },\n  computed: {\n    params:function(){\n     return {query:{key:location.pathname.split(\"/\")[2], id:location.pathname.split(\"/\")[3], code:location.pathname.split(\"/\")[4], status: location.pathname.split(\"/\")[5]}}\n    },\n    userid() {\n \n      return  location.pathname.split(\"/\")[2]? Number(location.pathname.split(\"/\")[2]) : Number((Math.random() * 10).toFixed()) / 2 > 3 ? 165 : 143;\n    },\n    ...mapState([\"pcm\"])\n  },\n\n  mounted() {\n      //   console.log(\"router:\",location.pathname.split(\"/\")[3]);\n    console.log(\"router params:\",this.params)\n   this.saveSocketIdConnected()\n    if (this.params.query.status == \"caller\"){\n      console.log(\"call will be started :\", this.params.query.status)\n      let i = 0;\n     let intr =  setInterval(()=>{\n       if(i === 6){\n         this.requestUserCall();\n         this.startAccounting();\n        clearInterval(intr);\n       }\n        this.countingdown  = 6 - i;\n            i++;\n        \n     }, 1000)\n console.log(\"video status:\",document.getElementsByClassName(\"caller\")[0].playing)//  this.makeCall();\n    } else {\n      this.startAccounting();\n      // called person request a accountinf infos\n      console.log(\"colled request for accounting\");\n    }\nthis.fixMobileStyle()\n      this.$socket.emit(\"join\", this.params.query.key)\n    //  console.info(this.params);\n    this.callsRemote();\n    this.callerCam();\n    let vm = this;\n    const dataConnection = this.$peer.connect(this.params.query.key);\n    this.$peer.on(\"open\", function (id) {\n      console.log(\"my connectio id :\", vm.params.query.id);\n     // vm.chatHandler()\n      vm.$socket.emit(\"peers\", {\n        type: \"update\",\n        payload: {\n          userid: vm.params.query.id,\n          peerid: id,\n          chat: JSON.stringify({}),\n          price: 12,\n          status: false,\n        },\n      });\n       vm.$socket.emit(\"peers\", {\n        type: \"participants\",\n        payload: {\n          userids: [Number(vm.params.query.id), Number(vm.params.query.code)],\n          id: Number(vm.params.query.id)\n        },\n      });\n    });\n  },\n  destroyed:()=>{\n    this.saveSocketIdDisconnected()\nthis.$socket.unsubscribe(\"chat_msg\")\nthis.$socket.emit(\"leave\", this.params.query.key)\n  },\n  methods: {\n    saveSocketIdConnected(){\n if(this.pcm.auth){\n     this.$socket.emit(\"save_socket_id\", {id:this.pcm.user.id, status: true})\n    } else {\n    this.$q.notify({\n      type: 'nigative',\n      message:\"пожалуйста, попробуйте сначала войти в систему!\"\n    })\n    }\n    },\n      saveSocketIdDisconnected(){\n if(this.pcm.auth){\n     this.$socket.emit(\"save_socket_id\", {id:this.pcm.user.id, status: false})\n    } \n    // else {\n    // // this.$q.notify({\n    // //   type: 'nigative',\n    // //   message:\"пожалуйста, попробуйте сначала войти в систему!\"\n    // // })\n    // }\n    },\n    stopthecall(){\n    this.saveSocketIdDisconnected();\n    // this.$peer.disconnect();\n    this.stopPaying();\n    },\n    requestUserCall:function(){\n     this.$socket.emit(\"request_user_call\", {userid: Number(this.params.query.id)})\n    },\n    sendMessage(msg) {\n      console.log(\"connection:\",this.connection);\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen\n          ? this.newMessagesCount\n          : this.newMessagesCount + 1;\n        this.messageList.push(msg);\n      }\n    },\n    // accepting call from model \n    acceptCall(){\n     this.makeCall();\n     this.startPaying();\n    },\n    // calling model trow peer to peer connection\n    makeCall() {\n      this.$socket.emit(\"peers\", {\n        type: \"get\",\n        payload: {\n          userid: this.params.query.code ,\n        },\n      });\n    },\n    // start accounting process\n    startAccounting(){\n      this.$socket.emit(\"startaccounting\", {...this.params.query, rol: this.pcm.user.rol})\n    },\n    onMessageWasSent(msg) {\n      this.messageList.push(msg);\n         this.$socket.emit(\"chat_msg\", {room:this.params.query.key,open: this.isChatOpen, msg:JSON.stringify(msg)})\n    },\n    openChat() {\n      this.isChatOpen = true;\n      this.newMessagesCount = 0;\n    },\n    closeChat() {\n     // this.$socket.emit(\"leave\", this.params.query.key)\n      this.isChatOpen = false;\n    },\n    startPaying(){\n    this.$socket.emit(\"sub_acounting\", {type: \"start\",chatkey: this.params.query.key,  userid: this.userid, modelid: this.modelid, price: Number(this.streamControl.price) })\n    },\n    stopPaying(){\n          this.$socket.emit(\"sub_acounting\", {type: \"stop\", userid: this.userid, modelid: this.modelid})\n    },\n    fixMobileStyle(){\nwindow.innerWidth < 600 ? document.getElementsByClassName(\"sc-chat-window\")[0].style.maxHeight = \"47%\":null;\n    },\n    callsRemote() {\n      let vm = this;\n//       this.$peer.on('connection', function(conn) {\n//   conn.on('data', function(data){\n//     // Will print 'hi!'\n//     console.log(data);\n//     vm.connection = conn\n//     vm.messageList.push(data);\n//   });\n// });\n      this.$peer.on(\"call\", (call) => {\n        call.answer(vm.called); // Answer the call with an A/V stream.\n        call.on(\"stream\", (remoteStream) => {\n          // Show stream in some <video> element.\n          let video = document.getElementsByClassName(\"caller\")[0];\n          // Show stream in some <video> element.\n          var videoStream = new MediaStream(remoteStream.getVideoTracks());\n          video.srcObject = remoteStream;\n          video.load();\n          video.play();\n        });\n      });\n    },\n    filter:async function (data){\n      console.log(data);\n    return {id: this.params.query.code, author:this.participants[0].name, data:JSON.parse(data.msg).data, type:JSON.parse(data.msg).type}\n    },\n    callerCam() {\n      let vm = this;\n      navigator.mediaDevices\n        .getUserMedia({ video: true, audio: true })\n        .then(function (stream) {\n          /* use the stream */  \n          vm.called = stream;\n          var audioStream = new MediaStream(stream.getAudioTracks());\n          var videoStream = new MediaStream(stream.getVideoTracks());\n          let video = document.getElementsByClassName(\"called\")[0];\n          video.srcObject = videoStream;\n          vm.calledMedia = audioStream;\n          video.load();\n          video.play();\n        })\n        .catch(function (err) {\n          console.log(err);\n          /* handle the error */\n        });\n    },\n  },\n  sockets: {\n    socket_saved:function(res){\n    if(res.status == \"saved\"){\n      console.info('socket id saved');\n    }\n    },\n    cl_request_user_call: function(res){\n    \n     //console.info(\"data from request call:\",res);\n     if(res.status){\n       this.request_call = true\n     } else {\n      this.$q.notify({\n        type:'nigative',\n        message: \"что-то не так произошло! пожалуйста, обновите страницу.\"\n      })\n     }\n    },\n    privateChatController:function(data){\n      let id = this.pcm.user.id;\n      console.info(data.streamInfos);\n     if (data){\n       this.modelid = Number(data.streamInfos.userId);\n       this.userid = Number(data.streamInfos.userId) === Number(this.params.query.code) ? Number(this.params.query.id) : Number(this.params.query.code);\n       this.streamControl.price = data.streamInfos.sumPrivat;\n        this.streamControl.accountOne = data.balances.filter(e=> id == e.id)[0].balance;\n        console.info( {start: true, modelid: data.streamInfos.userId, userid: data.balances.filter(e=>data.streamInfos.userId != e.id )[0].id})\n        this.$socket.emit(\"sub_acounting\", {start: true, modelid: data.streamInfos.userId, userid: data.balances.filter(e=>data.streamInfos.userId != e.id )[0].id})\n     }\n    },\n    chat_msg:function(data){\n    console.log(JSON.parse(data.msg));\nthis.filter(data).then((msg)=>{\n this.messageList.push(msg);\n})\n      this.isChatOpen = data.open\n    },\n    cl_sub_acounting:function(res){\n     if(res.status){\nthis.streamControl.accountOne = this.params.query.status == \"caller\" ? res.payload.model : res.payload.user;\nthis.streamControl.transfered = res.payload.gain\n     } else {\n       this.$q.notify({\n         type:\"nigative\",\n         message:\"\"\n       })\n     }\n    },\n    peer_res: function (res)  {\n      let vm = this;\n      console.log(res.payload);\n      if (res.type == \"get\" && res.status) {\n//        let conn =  this.$peer.connect(res.payload.peerid)\n//       conn.on('open', function(){\n//   // here you have conn.id\n//    this.connection = conn\n// });\n\n        const call = this.$peer.call(res.payload.peerid, this.called);\n        call.on(\"stream\", (remoteStream) => {\n          let video = document.getElementsByClassName(\"caller\")[0];\n          // Show stream in some <video> element.\n          var videoStream = new MediaStream(remoteStream.getVideoTracks());\n          video.srcObject = remoteStream;\n          video.load();\n          video.play();\n        });\n      } else if(res.type == \"participants\" && res.status){\n      this.participants = res.payload.map(e=>e={imageUrl:'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png', name:e.name,id:e.id}).filter(s=>Number(s.id) !== Number(vm.params.query.id))\n      }\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n/* h1, h2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n} */\n\n.grid-1 {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: center;\n  align-content: stretch;\n}\n.grid-videos {\n  top:0px;\n  bottom: 0;\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: stretch;\n  align-content: stretch;\n}\n.caller {\n  width: 100%;\n  height: 100%;\n  background: black;\n}\n.called {\n  position: absolute;\n  left: 0;\n bottom: 51px;\n  border-radius: 20px;\n  width: 360px;\n  margin: 3px;\n}\nsvg{position:unset !important;\ntop:unset !important ;\nleft: unset !important;\nwidth:unset !important ;\nheight: unset !important;\nz-index: unset !important;\nfilter: unset !important;\n}\n.slideout{\n  height: 0px;\n  max-height: 0px;\n}\n.panel {\n  width: 100%;\n  margin: 0px 3px;\n}\n.paneltools {\n  height: 40px;\n  width: 100%;\n  min-width: 300px;\n  background: #ccc;\n  border-radius: 0px 0px 10px 10px;\n  z-index: 2;\n  position: relative;\n  display: flex;\njustify-content: center;\n}\n.chat {\n  width: 100%;\n  background: #444;\n  overflow-y: hidden;\n  max-height: 500px; /* approximate max height */\nmax-height: 0px;\n  transition-property: all;\n  transition-duration: 0.5s;\n  transition-timing-function: cubic-bezier(0, 1, 0.5, 1);\n  border-radius: 0px 0px 10px 10px;\n  margin-top: -10px;\n  display: flex;\njustify-content: center;\n}\n.slidein {\n   height: 200px;\n   max-height: 400px;\n}\n.wallframe-called {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  border-radius: 20px;\n  width: 360px;\n  margin: 3px;\n  height: 266px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@media screen and (max-width:450px) {\n.sc-chat-window{\n min-height: 43px !important;\n  \n}\n\n}\n@media screen and (max-width:600px) {\n\n.wallframe-called,\ncanvas {\n transform: scale(0.45,0.45);\ntransform-origin: bottom left;\n}\n.sc-header--title{\n  font-size: 10px;\n}\n.sc-header{\n  min-height:49px;\n}\n\n.called {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  border-radius: 20px;\n  width: 160px;\n  margin: 3px;\n}\n}\n.wallframe-called,\ncanvas {\n  opacity: 0.3;\n}\n.startCall {\n  height: 3em;\n  width: 6em;\n  font-size: 0.8em;\n  font-weight: bold;\n  border-radius: 10px;\n  border: unset;\n  position: relative;\n  top: 14px;\n}\n.pricetag span{\n  font-kerning: initial;\n  background: #5e5959cf;\nheight: 30%;\npadding: 7% 10px;\nborder-radius: 15px;\ntext-align: inherit;\n-webkit-text-stroke: 1px rgb(26, 22, 22);\n-moz-text-stroke: 1px rgb(26, 22, 22);\n-webkit-touch-callout: none;\n-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: none;\n-ms-user-select: none;\nuser-select: none;\ntext-decoration: none;\n}\n.pricetag span:hover{\n   background: #3d3939cf;\n}\n.pricetag span::selection { background: transparent; } \n.pricetag{\n  position:absolute;\n  top:50px;\n  right:10px;\n  width:200px;\n  height:200px;\n  background:#f00184ab; \n\nborder-radius: 20px;\ndisplay: flex;\njustify-content: space-evenly;\nflex-direction:column;\nalign-items: space-around;\ncolor: white;\npadding: 0px 9px;\nfont-size: 1.3em;\n}\n</style>\n","<template>\n  <div class=\"grid-1\">\n    <video\n      class=\"caller\"\n      src=\"\"\n      autoplay\n      poster=\"https://thelinuxuser.com/wp-content/uploads/2020/01/1-2.jpg\"\n      :controls=\"false\"\n    ></video>\n    <video\n      class=\"called\"\n      poster=\"https://thumbs.dreamstime.com/b/offline-sign-round-ribbon-sticker-tag-171014661.jpg\"\n      :controls=\"false\"\n    ></video>\n    <av-media\n      type=\"circle\"\n      line-color=\"#fff\"\n      class=\"wallframe-called\"\n      :media=\"calledMedia\"\n      :canv-height=\"250\"\n    ></av-media>\n    <div class=\"grid-videos\">\n      <div class=\"panel\">\n        <div\n          class=\"paneltools\"\n          @click=\"animated = animated === 'slidein' ? 'slideout' : 'slidein'\"\n        ></div>\n        <div :class=\"`chat ${animated}`\">\n          <button class=\"startCall\" @click=\"makeCall\">call</button>\n        </div>\n      </div>\n    </div>\n    <beautiful-chat\n      :agentProfile=\"agentProfile\"\n      :onMessageWasSent=\"onMessageWasSent\"\n      :messageList=\"messageList\"\n      :newMessagesCount=\"newMessagesCount\"\n      :isOpen=\"isChatOpen\"\n      :close=\"closeChat\"\n      :open=\"openChat\"\n      :colors=\"colors\"\n      :showEmoji=\"true\"\n      :showFile=\"true\"\n      :participants=\"participants\"\n    />\n  </div>\n</template>\n\n<script>\n// import { peer  } from \"../utils/serverConnect\"\n// import { leaps } from \"leaps\";\nimport Urlp from \"url-parse\";\nexport default {\n  name: \"HelloWorld\",\n  // component:{\n  //   leaps\n  // },\n  data() {\n    return {\n      msg: \"Welcome to Your Vue.js App\",\n      id: \"idtest\",\n      animated: \"\",\n      calledMedia: null,\n      called: null,\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      }, // specifies th\n      caller: null,\n      participants:[],\n      agentProfile: {\n        teamName: \"Vue Beautiful Chat\",\n        imageUrl: \"https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\",\n      },\n      messageList: [],\n      newMessagesCount: 0,\n      isChatOpen: false,\n      connection:null\n    };\n  },\n  computed: {\n    params:function(){\n     return {query:{key:location.pathname.split(\"/\")[2], id:location.pathname.split(\"/\")[3], code:location.pathname.split(\"/\")[4]}}\n    },\n    userid() {\n \n      return  location.pathname.split(\"/\")[2]? Number(location.pathname.split(\"/\")[2]) : Number((Math.random() * 10).toFixed()) / 2 > 3 ? 165 : 143;\n    },\n  },\n\n  mounted() {\n      //   console.log(\"router:\",location.pathname.split(\"/\")[3]);\n     console.log(\"router params:\",this.params)\n      this.fixMobileStyle()\n      this.$socket.emit(\"join\", this.params.query.key)\n    //  console.info(this.params);\n    this.callsRemote();\n    this.callerCam();\n    let vm = this;\n    const dataConnection = this.$peer.connect(this.params.query.key);\n    this.$peer.on(\"open\", function (id) {\n      console.log(\"my connectio id :\", vm.params.query.id);\n     // vm.chatHandler()\n      vm.$socket.emit(\"peers\", {\n        type: \"update\",\n        payload: {\n          userid: vm.params.query.id,\n          peerid: id,\n          chat: JSON.stringify({}),\n          price: 12,\n          status: false,\n        },\n      });\n       vm.$socket.emit(\"peers\", {\n        type: \"participants\",\n        payload: {\n          userids: [Number(vm.params.query.id), Number(vm.params.query.code)],\n          id: Number(vm.params.query.id)\n        },\n      });\n    });\n  },\n  destroyed:()=>{\nthis.$socket.unsubscribe(\"chat_msg\")\nthis.$socket.emit(\"leave\", this.params.query.key)\n  },\n  methods: {\n    sendMessage(msg) {\n      console.log(\"connection:\",this.connection);\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen\n          ? this.newMessagesCount\n          : this.newMessagesCount + 1;\n        this.messageList.push(msg);\n     \n      }\n    },\n    makeCall() {\n      this.$socket.emit(\"peers\", {\n        type: \"get\",\n        payload: {\n          userid: this.params.query.code ,\n        },\n      });\n    },\n    onMessageWasSent(msg) {\n      this.messageList.push(msg);\n         this.$socket.emit(\"chat_msg\", {room:this.params.query.key,open: this.isChatOpen, msg:JSON.stringify(msg)})\n    },\n    openChat() {\n      \n      this.isChatOpen = true;\n      this.newMessagesCount = 0;\n    },\n    closeChat() {\n     // this.$socket.emit(\"leave\", this.params.query.key)\n      this.isChatOpen = false;\n    },\n    fixMobileStyle(){\nwindow.innerWidth < 600 ? document.getElementsByClassName(\"sc-chat-window\")[0].style.maxHeight = \"47%\":null;\n    },\n    callsRemote() {\n      let vm = this;\n//       this.$peer.on('connection', function(conn) {\n//   conn.on('data', function(data){\n//     // Will print 'hi!'\n//     console.log(data);\n//     vm.connection = conn\n//     vm.messageList.push(data);\n//   });\n// });\n      this.$peer.on(\"call\", (call) => {\n        call.answer(vm.called); // Answer the call with an A/V stream.\n        call.on(\"stream\", (remoteStream) => {\n          // Show stream in some <video> element.\n          let video = document.getElementsByClassName(\"caller\")[0];\n          video.setAttribute(\"playsinline\", true);\n          // Show stream in some <video> element.\n          var videoStream = new MediaStream(remoteStream.getVideoTracks());\n          video.srcObject = remoteStream;\n          video.load();\n          video.play();\n        });\n      });\n    },\n    filter:async function (data){\n      console.log(data);\n    return {id: this.params.query.code, author:this.participants[0].name, data:JSON.parse(data.msg).data, type:JSON.parse(data.msg).type}\n    },\n    callerCam() {\n      let vm = this;\n      navigator.mediaDevices\n        .getUserMedia({ video: true, audio: true })\n        .then(function (stream) {\n          /* use the stream */  \n          vm.called = stream;\n          var audioStream = new MediaStream(stream.getAudioTracks());\n          var videoStream = new MediaStream(stream.getVideoTracks());\n          let video = document.getElementsByClassName(\"called\")[0];\n          video.setAttribute(\"playsinline\", true);\n          video.srcObject = videoStream;\n          vm.calledMedia = audioStream;\n          video.load();\n          video.play();\n        })\n        .catch(function (err) {\n          console.log(err);\n          /* handle the error */\n        });\n    },\n  },\n  sockets: {\n    chat_msg:function(data){\n    console.log(JSON.parse(data.msg));\nthis.filter(data).then((msg)=>{\n this.messageList.push(msg);\n})\n      this.isChatOpen = data.open\n\n    },\n    peer_res: function (res)  {\n      let vm = this;\n      if (res.type == \"get\" && res.status) {\n//        let conn =  this.$peer.connect(res.payload.peerid)\n//       conn.on('open', function(){\n//   // here you have conn.id\n//    this.connection = conn\n// });\n\n        const call = this.$peer.call(res.payload.peerid, this.called);\n        call.on(\"stream\", (remoteStream) => {\n          let video = document.getElementsByClassName(\"caller\")[0];\n          // Show stream in some <video> element.\n          video.setAttribute(\"playsinline\", true);\n          var videoStream = new MediaStream(remoteStream.getVideoTracks());\n          video.srcObject = remoteStream;\n          video.load();\n          video.play();\n        });\n      } else if(res.type == \"participants\" && res.status){\n      this.participants = res.payload.map(e=>e={imageUrl:'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png', name:e.name,id:e.id}).filter(s=>Number(s.id) !== Number(vm.params.query.id))\n      }\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n/* h1, h2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n} */\n\n.grid-1 {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: center;\n  align-content: stretch;\n}\n.grid-videos {\n  top:0px;\n  bottom: 0;\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: stretch;\n  align-content: stretch;\n}\n.caller {\n  width: 100%;\n  height: 100%;\n  background: black;\n}\n.called {\n  position: absolute;\n  left: 0;\n bottom: 51px;\n  border-radius: 20px;\n  width: 360px;\n  margin: 3px;\n}\nsvg{position:unset !important;\ntop:unset !important ;\nleft: unset !important;\nwidth:unset !important ;\nheight: unset !important;\nz-index: unset !important;\nfilter: unset !important;\n}\n.slideout{\n  height: 0px;\n  max-height: 0px;\n}\n.panel {\n  width: 100%;\n  margin: 0px 3px;\n}\n.paneltools {\n  height: 40px;\n  width: 100%;\n  min-width: 300px;\n  background: #ccc;\n  border-radius: 0px 0px 10px 10px;\n  z-index: 2;\n  position: relative;\n}\n.chat {\n  width: 100%;\n  background: #444;\n  overflow-y: hidden;\n  max-height: 500px; /* approximate max height */\nmax-height: 0px;\n  transition-property: all;\n  transition-duration: 0.5s;\n  transition-timing-function: cubic-bezier(0, 1, 0.5, 1);\n  border-radius: 0px 0px 10px 10px;\n  margin-top: -10px;\n  display: flex;\njustify-content: center;\n}\n.slidein {\n   height: 200px;\n   max-height: 400px;\n}\n.wallframe-called {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  border-radius: 20px;\n  width: 360px;\n  margin: 3px;\n  height: 266px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@media screen and (max-width:450px) {\n.sc-chat-window{\n min-height: 43px !important;\n  \n}\n\n}\n@media screen and (max-width:600px) {\n\n.wallframe-called,\ncanvas {\n transform: scale(0.45,0.45);\ntransform-origin: bottom left;\n}\n.sc-header--title{\n  font-size: 10px;\n}\n.sc-header{\n  min-height:49px;\n}\n\n.called {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  border-radius: 20px;\n  width: 160px;\n  margin: 3px;\n}\n}\n.wallframe-called,\ncanvas {\n  opacity: 0.3;\n}\n.startCall {\n  height: 3em;\n  width: 6em;\n  font-size: 0.8em;\n  font-weight: bold;\n  border-radius: 10px;\n  border: unset;\n  position: relative;\n  top: 14px;\n}\n</style>\n"]}